// <auto-generated />
using System;
using DonationManagementAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DonationManagementAPI.Migrations
{
    [DbContext(typeof(DonationContext))]
    partial class DonationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DonationManagementAPI.Entities.Changelog", b =>
                {
                    b.Property<int>("ChangelogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ChangelogId"));

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ChangedData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ChangelogId");

                    b.ToTable("Changelogs");
                });

            modelBuilder.Entity("DonationManagementAPI.Entities.Donor", b =>
                {
                    b.Property<int>("DonorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DonorId"));

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DonorId");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("DonationManagementAPI.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DonorId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("DonorId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DonationManagementAPI.Entities.PaymentPledge", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("PledgeId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId", "PledgeId");

                    b.HasIndex("PledgeId");

                    b.ToTable("PaymentPledges");
                });

            modelBuilder.Entity("DonationManagementAPI.Entities.Pledge", b =>
                {
                    b.Property<int>("PledgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PledgeId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DonorId")
                        .HasColumnType("int");

                    b.HasKey("PledgeId");

                    b.HasIndex("DonorId");

                    b.ToTable("Pledges");
                });

            modelBuilder.Entity("DonationManagementAPI.Entities.Payment", b =>
                {
                    b.HasOne("DonationManagementAPI.Entities.Donor", "Donor")
                        .WithMany("Payments")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("DonationManagementAPI.Entities.PaymentPledge", b =>
                {
                    b.HasOne("DonationManagementAPI.Entities.Payment", "Payment")
                        .WithMany("PaymentPledges")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DonationManagementAPI.Entities.Pledge", "Pledge")
                        .WithMany("PaymentPledges")
                        .HasForeignKey("PledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Pledge");
                });

            modelBuilder.Entity("DonationManagementAPI.Entities.Pledge", b =>
                {
                    b.HasOne("DonationManagementAPI.Entities.Donor", "Donor")
                        .WithMany("Pledges")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("DonationManagementAPI.Entities.Donor", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Pledges");
                });

            modelBuilder.Entity("DonationManagementAPI.Entities.Payment", b =>
                {
                    b.Navigation("PaymentPledges");
                });

            modelBuilder.Entity("DonationManagementAPI.Entities.Pledge", b =>
                {
                    b.Navigation("PaymentPledges");
                });
#pragma warning restore 612, 618
        }
    }
}
